#!/usr/bin/env zsh

# Load environment variables from .envrc
if [[ -f .envrc ]]; then
    source .envrc
else
    echo ".envrc file not found"
    return 1
fi

usage() {
    echo "Usage: [namespace]"
    echo "  - namespace: The Kubernetes namespace to search in (default: production)."
}

# Default values
local namespace="${1:-production}" # Default to production if no namespace is provided
local pod_names

# Convert VERTICAL_PODS and HORIZONTAL_PODS to arrays
vertical_pods=(${(s:,:)VERTICAL_PODS})
horizontal_pods=(${(s:,:)HORIZONTAL_PODS})

# Get all pod names in the namespace
pod_names=($(kubectl get pod -n "$namespace" | awk 'NR>1 {print $1}'))

if [[ ${#pod_names[@]} -eq 0 ]]; then
    echo "No pods found in namespace: $namespace"
    return 1
fi

# Create a new window for the first pod
osascript <<EOF
tell application "iTerm"
  set newWindow to (create window with default profile)
  tell newWindow
    tell current session
      write text "kubectl logs -n '$namespace' -f '${pod_names[1]}' | jq"
    end tell
  end tell
end tell
EOF

# Split the window into the number of pods
for ((i = 1; i < ${#pod_names[@]}; i++)); do
    local split_direction="horizontally"
    for vertical_pod in "${vertical_pods[@]}"; do
        if [[ "${pod_names[$i]}" == *"$vertical_pod"* ]]; then
            split_direction="vertically"
            break
        fi
    done
    for horizontal_pod in "${horizontal_pods[@]}"; do
        if [[ "${pod_names[$i]}" == *"$horizontal_pod"* ]]; then
            split_direction="horizontally"
            break
        fi
    done
    osascript <<EOF
tell application "iTerm"
  tell current window
    tell current session
      split $split_direction with default profile
      delay 0.5
    end tell
  end tell
end tell
EOF
done

# Write the kubectl logs command to all of the panes
for ((i = 0; i < ${#pod_names[@]}; i++)); do
    osascript <<EOF
tell application "iTerm"
  tell current window
    tell session $(($i + 1)) of current tab
      write text "kubectl logs -n '$namespace' -f '${pod_names[$i]}' | jq"
    end tell
  end tell
end tell
EOF
done

